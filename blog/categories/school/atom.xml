<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: school | Beep Boop Bop]]></title>
  <link href="http://sammarcus.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://sammarcus.github.io/"/>
  <updated>2014-11-10T09:56:19-05:00</updated>
  <id>http://sammarcus.github.io/</id>
  <author>
    <name><![CDATA[Sam Marcus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVC is the MVP]]></title>
    <link href="http://sammarcus.github.io/blog/2014/11/06/mvc-is-the-mvp/"/>
    <updated>2014-11-06T14:52:51-05:00</updated>
    <id>http://sammarcus.github.io/blog/2014/11/06/mvc-is-the-mvp</id>
    <content type="html"><![CDATA[<p align="center"><img src="http://i.imgur.com/3LntWLt.gif" alt="Jake" /></p>

<p> We were originally introduced to the Model, View and Controller concept, or MVC, 2 weeks ago when we started SQL and Active Record. Knowledge often flies very fast here and it can be difficult to ascertain what we’ll definitely need to grasp and other ideas that we may be able to lookup and reference later. When MVC stuck around in Rails I knew it was something worth spending the time to get to know. When I knew I needed to tweak something but didn’t know exactly where to do it, I would furiously toggle between all three and try to play a guessing game. Highly ineffective.</p>

<p>The idea of this three pronged approach is not specific to the things we’ve learned so far. Hardly! It’s a basic architecture for processing and delivering information to users, something nearly every program is responsible for. Our instructor, Avi, gave the example of a restaurant business where the model is the chef and the controller is the waiter, delivering the food. I obsessed with this example for so long and stretched it to its limit (and far beyond,) so I tried to take it from scratch and dig even deeper.</p>

<p align="center"><img src="http://betterexplained.com/wp-content/uploads/rails/mvc-rails.png" alt="Diagram" /></p>

<p><br /></p>

<h3>Model</h3>
<p>Let’s start with the model. It’s probably where you’ll be spending most of your time, anyway. Models are Ruby classes, and the most logic is going to be in here — more than the other two. They do the heavy lifting and the true processing portion. You want to avoid delegating these out later to something in the controller (that’s what the very concept of MVC is designed to prevent in my opinion). By creating it as independent of the controller as possible, you can have multiple controllers to process as needed. This is also the best place to validate your data as well.</p>

<p><br /></p>

<h3>Controller</h3>
<p>Next up is controllers. I saw someone describe this as “Dilbert-esque”, and that’s pretty spot on. You remember Dilbert, right? His tie never seemed to stay down against his shirt, probably could’ve used a tie clip. But that’s not really what tie clips are for anymore, I think they’ve turned more into a fashion statement at this point. Besides, why does his tie even curve up?</p>

<p align="center"><img src="http://queens.db.toronto.edu/~cmishra/dilbert.gif" alt="Dilbert" /></p>

<p>Anyways, back to the controller. It barks simplistic orders and dictates a lot of the basics of how the program works. Connecting the model to the view, it knows how to do something - but should only know how to do it just well enough to do it correctly. Forcing too much logic in your controller and taking the heavy lifting out of the model is detrimental to your overall program as it is the least abstract way to go about it. A proper controller will never include any database related actions, this needs to be in the model.
<br />
<br /></p>
<h3>View</h3>

<p>Finally, the view is what the user ends up seeing. Using ERB (embedded Ruby), the goal should be to make this as lightweight of a file as possible. You can use HTML and Ruby to render a fantastic output fit for a king! There’s not a whole lot to say about the viewers, but these must be kept simple.</p>

<p>Another diagram I liked a lot was this:</p>

<p align="center"><img src="http://upload.wikimedia.org/wikipedia/commons/a/a0/MVC-Process.svg" alt="Dia2" /></p>

<p>There’s no one right way to draw the diagram, but there are many wrong ways to draw it. None of these are it. With the appropriate planning, you’ll have a powerful MVC trio in no time!</p>

<p><br /></p>

<p align="center"><img src="http://i.imgur.com/DyV6q7u.gif" alt="Sleep" /></p>

<p>(revised 11-10-14)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Packages on Packages on Packages]]></title>
    <link href="http://sammarcus.github.io/blog/2014/10/23/packages-on-packages-on-packages/"/>
    <updated>2014-10-23T09:32:02-04:00</updated>
    <id>http://sammarcus.github.io/blog/2014/10/23/packages-on-packages-on-packages</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://tomcohenno.github.io/blog/2014/10/20/rrrrrrrspec/">Tom’s RubyTest package add on post</a>, I went on a hunt to find other cool additions that might make our day to day tasks even easier. I did not return from the hunt empty handed! Here are four that particularly stood out to me:</p>

<p><img src="http://cl.ly/image/3o362H3s1d3h/Image%202014-10-23%20at%209.43.35%20AM.png" alt="Meme" /></p>

<h2>Git Package</h2>
<p><a href="https://github.com/kemayo/sublime-text-git/wiki">Git Install Details</a></p>

<p>Github is the backbone behind collaborative software development, making this service a fairly language agnostic tool relevant to everyone. The aptly named package “Git” for Sublime ties in core functions directly within the text editor. Even though I haven’t reached the point where I’m cloning other people’s code outside the school to work on, it still includes basic functions that allow you to bypass terminal and work directly inside Sublime.</p>

<p><img src="http://cl.ly/image/2B0M1Z332h3h/Image%202014-10-23%20at%209.44.27%20AM.png" alt="List" /></p>

<p>An especially useful option is Quick Commit, which simultaneously stages your commit as well. Note that you can type in your commit message in a special dialog option that appears. Current Git branch status is displayed at the bottom of the status bar at all times. Finally, you can push as well.</p>

<p><img src="http://cl.ly/image/1O1I2f0I1A2S/Image%202014-10-23%20at%209.45.24%20AM.png" alt="GitMessage" /></p>

<p><img src="http://cl.ly/image/320c3v0N2L2x/Image%202014-10-23%20at%209.45.46%20AM.png" alt="GitStatus" /></p>

<h2>SublimeLinter Package:</h2>
<p><a href="https://sublime.wbond.net/packages/SublimeLinter">SublimeLinter Package Details</a></p>

<p>For those who may be syntax challenged, two Packages stood out as particularly useful. SublimeLinter and SublimeCodeIntel have both proved useful and timesaving additions to my Package library.</p>

<p>Linting, as described by Wikipedia:</p>
<blockquote><p>In computer programming, lint was the name originally given to a particular program that flagged some suspicious and non-portable constructs (likely to be bugs) in C language source code. The term is now applied generically to tools that flag suspicious usage in software written in any computer language. The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform static analysis of source code.</p></blockquote>
<p>As all of my past tablemates can attest to, I became wildly skilled at failing to end my method definitions. Of course, this would cause the entire program to produce an error. Linting packages for Sublime (there are many) take a language-specific Linter and referbce those while checking your code for potential errors in real time. Like everything in Sublime, options to customize are abound.</p>

<p>Because the default evaluates code in realtime as you type (similar to spellcheck), experienced users may find this especially distracting as there will always be errors before you finish your line. You can change to have it delay to avoid this. SublimeLinter shows both warnings and errors, shown respectively below.</p>

<p><img src="http://cl.ly/image/3m3D1j3y1O11/Image%202014-10-23%20at%209.46.12%20AM.png" alt="LintDwarves" /></p>
<p><img src="http://cl.ly/image/461H2T0e1X0G/Image%202014-10-23%20at%209.47.38%20AM.png" alt="LintLast" /></p>

<h2>SublimeCodeIntel Package:</h2>
<p><a href="https://sublime.wbond.net/packages/SublimeCodeIntel">SublimeCodeIntel Package Details</a></p>

<p>On our first day we installed Ruby specific add ons, which generally autocomplete Ruby syntax particularly well. Another is CodeIntel, which I have come to prefer as it saves time by offering cookie cutter methods with autocomplete.</p>

<p><img src="http://cl.ly/image/1n3K34383M1w/Image%202014-10-23%20at%209.46.32%20AM.png" alt="Intel1" /></p>
<p><img src="http://cl.ly/image/1z2Q0j0E3I1g/Image%202014-10-23%20at%209.46.55%20AM.png" alt="Intel2" /></p>

<h2>Terminal Package:</h2>
<p><a href="https://sublime.wbond.net/packages/Terminal">Terminal Package Details</a></p>

<p>Finally, Terminal by Will Bond (the same person who made the famous Package Control) is a super simple option to open the current Sublime file in Terminal, auto navigating to the appropriate directory with a cd command in the background.</p>

<p>All of these are compatible with both Sublime Text 2 and Sublime Text 3 and can be installed with Package Control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post On Octopress]]></title>
    <link href="http://sammarcus.github.io/blog/2014/10/08/my-first-post-on-octopress/"/>
    <updated>2014-10-08T18:52:07-04:00</updated>
    <id>http://sammarcus.github.io/blog/2014/10/08/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Hello, world!!</p>
]]></content>
  </entry>
  
</feed>
